#!/usr/bin/env bash

set -eo pipefail
shopt -s inherit_errexit

profile="/nix/var/nix/profiles/system"

unset action dryrun machine jobs system target verbose

function usage {
    echo 'nixos ACTION [ MACHINE ]'
    echo '  -f, --file     Nix file to find machine attribute in.'
    echo '  -p, --profile  Path to the profile to update.'
    echo '  -t, --target   SSH hostname to update.'
    echo '  -v, --verbose  Log executed commands.'
    echo '  -n, --dry-run  Show commands that would be executed.'
    echo '  -j, --jobs     Number of simultaneous jobs to use when building.'
    exit 1
}

options=$(getopt    \
  -o h  -l help     \
  -o f: -l file:    \
  -o p: -l profile: \
  -o t: -l target:  \
  -o v  -l verbose  \
  -o n  -l dry-run  \
  -o j: -l jobs:    \
  -- "$@")

test $? -eq 0 || usage

eval set -- "$options"

while [ $# -gt 0 ]; do
  i="$1"; shift 1
  case "$i" in
    --help|-h)
      usage
      ;;
    --profile|-p)
      profile="$1"
      shift
      ;;
    --target|-t)
      target="$1"
      shift
      ;;
    --file|-f)
      NIXOS_MACHINES="$1"
      shift
      ;;
    --verbose|-v)
      verbose=1
      ;;
    --dry-run|-n)
      dryrun=1
      verbose=1
      ;;
    --jobs|-j)
      jobs="-j$1"
      shift
      ;;
    --)
      break
      ;;
  esac
done

action="$1"
machine="$2"

if [ -n "$3" ]; then
  echo "$0: Unsupported option: $3"
fi

if [ -z "$machine" -a -n "$target" ]; then
  echo "$0: Cannot set target without setting machine" >&2
  exit 1
fi

if [ -z "$machine" ]; then
  machine="$(hostname)"
fi

if [ -z "$target" ]; then
  target="root@$machine"
fi

function andlog {
  test -z "$verbose" || echo \$ "$@" 1>&2
  "$@"
}

function dryexec {
  test -z "$verbose" || echo \$ "$@" 1>&2
  test -n "$dryrun" || "$@"
}

atTarget="ssh $target"

case "$action" in
  boot|copy|switch|test)
    system=$(dryexec nix-build $jobs --no-out-link "$NIXOS_MACHINES" -A "$machine.system")
    test -z "$dryrun" || system=$(nix-instantiate --eval "$NIXOS_MACHINES" -A "$machine.system.outPath")
    test -z "$verbose" || echo "system=$system"
    dryexec nix-copy-closure --use-substitutes --to "$target" "$system"
    ;;
  vm)
    system=$(dryexec nix-build $jobs --no-out-link "$NIXOS_MACHINES" -A "$machine.vm")
    test -z "$dryrun" || system=$(nix-instantiate --eval "$NIXOS_MACHINES" -A "$machine.vm.outPath")
    test -z "$verbose" || echo "system=$system"
    dryexec ls "$system/bin"
    exit 0
    ;;
  build)
    dryexec nix-build $jobs --no-out-link "$NIXOS_MACHINES" -A "$machine.system"
    exit 0
    ;;
  instantiate)
    dryexec nix-instantiate "$NIXOS_MACHINES" -A "$machine.system"
    exit 0
    ;;
  *)
    echo "$0: unknown action '$action'" >&2
    exit 1
    ;;
esac

case "$action" in
  boot|switch)
    dryexec $atTarget nix-env -p "$profile" --set "$system"
    ;;
esac

case "$action" in
  boot|switch|test)
    dryexec $atTarget "$system/bin/switch-to-configuration" "$action"
    ;;
esac
